Peter Ferrie posted some nice code to detect 64-bit mode [1]
I later discovered it was inspired by Arkon [2]

It got me thinking about other ways to do it.

I'm using NASM which is what I suspect Peter uses too.
It supports mixing 32 and 64 bit code which is very useful.

Arkon's initial solution in 6 bytes was this:


        xor eax, eax
        db 40h
        nop
        jz is_64bit
        
        ; 32-bit code here
    is_64bit:
        ; ...
  
32-bit translation

  /* 00000000 */  "\x31\xC0"                           /*  xor eax, eax */
  /* 00000002 */  "\x40"                               /*  inc eax */
  /* 00000003 */  "\x90"                               /*  nop */
  /* 00000004 */  "\x74\x00"                           /*  je 00000006h */

64-bit translation

  /* 00000000 */  "\x31\xC0"                           /*  xor eax, eax */
  /* 00000002 */  "\x40\x90"                           /*  nop */
  /* 00000004 */  "\x74\x00"                           /*  je 00000006h */

As Arkon explains, eax becomes 1 on 32-bit but remains zero 
on 64-bit and makes the jump.

The following is Peter's code.

        bits 32
        xor  ecx, ecx
        inc  ecx
        loop is_64bit 
        
        xor  eax, eax
        
    is_64bit:
        bits 64
        xor  rax, rax
        
32-bit

    /* 00000000 */  "\x31\xC9"                          /*  xor ecx, ecx */
    /* 00000002 */  "\x41"                              /*  inc ecx */
    /* 00000003 */  "\xE2\x00"                          /*  loop 00000005h */
    
64-bit

    /* 00000000 */  "\x31\xC9"                          /*  xor ecx, ecx */
    /* 00000002 */  "\x41\xE2\x00"                      /*  loop 00000005h */

The 32-bit code will follow through with loop because ecx is 1. 
The 64-bit code will branch to the is_64bit because of REX prefix.

There are alternatives if you get creative enough with valid
REX prefixes which would appear as INC/DEC instructions of 
any valid 32-bit register. I use DEC EAX for examples here.

Something similar in 5 bytes would be:


        bits 32
        xor  eax, eax
        dec  eax
        jns  is_64bit 
        
        xor  eax, eax
        
    is_64bit:
        bits 64
        xor  rax, rax
    
32-bit

  /* 00000000 */  "\x31\xC0"                           /*  xor eax, eax */
  /* 00000002 */  "\x48"                               /*  dec eax */
  /* 00000003 */  "\x79\x02"                           /*  jns 00000007h */

64-bit

  /* 00000000 */  "\x31\xC0"                           /*  xor eax, eax */
  /* 00000002 */  "\x48\x79\x02"                       /*  jns 00000007h */

The 32-bit code follows through while on 64-bit it makes the jump.
Another example using 6 bytes.

        bits 32
        xor   eax, eax
        dec   eax
        xchg  eax, ecx
        jecxz is_64bit
        
        ;xor   eax, eax
        
    is_64bit:
        bits 64
        ;xor   rax, rax
    
 
32-bit

  /* 00000000 */  "\x31\xC0"                           /*  xor eax, eax */
  /* 00000002 */  "\x48"                               /*  dec eax */
  /* 00000003 */  "\x91"                               /*  xchg eax, ecx */
  /* 00000004 */  "\xE3\x02"                           /*  jecxz 00000008h */

64-bit

  /* 00000000 */  "\x31\xC0"                           /*  xor eax, eax */
  /* 00000002 */  "\x48\x91"                           /*  xchg rax, rcx */
  /* 00000004 */  "\xE3\x02"                           /*  jrcxz 00000008h */

    
Another very similar to above but using jns instead of jecxz

       bits 32
        xor   eax, eax
        dec   eax
        xchg  eax, ecx
        jns   is_64bit
        ; execute 32-bit code
    is_64bit:
        bits 64
        ; execute 64-bit code

32-bit

    /* 00000000 */  "\x31\xC0"                           /*  xor eax, eax */
    /* 00000002 */  "\x48"                               /*  dec eax */
    /* 00000003 */  "\x91"                               /*  xchg eax, ecx */
    /* 00000004 */  "\x79\x00"                           /*  jns 00000006h */

64-bit

    /* 00000000 */  "\x31\xC0"                           /*  xor eax, eax */
    /* 00000002 */  "\x48\x91"                           /*  xchg rax, rcx */
    /* 00000004 */  "\x79\x00"                           /*  jns 00000006h */

    
Here's one using CDQ / CQO in 9 bytes.

        bits 32
        or   eax, -1        ; set 32-bits
        dec  eax            ; cdq becomes cqo on 64-bit
        cdq                 ; if edx is zero, we're 64-bits
        test edx, edx
        jz   is_64bit
        
        xor  eax, eax
    is_64bit:
       bits 64
        xor  rax, rax
    
    
32-bit

  /* 00000000 */  "\x83\xC8\xFF"                       /*  or eax, FFFFFFFFh */
  /* 00000003 */  "\x48"                               /*  dec eax */
  /* 00000004 */  "\x99"                               /*  cdq */
  /* 00000005 */  "\x85\xD2"                           /*  test edx, edx */
  /* 00000007 */  "\x74\x00"                           /*  je 00000009h */ 

64-bit

  /* 00000000 */  "\x83\xC8\xFF"                       /*  or eax, FFFFFFFFh */
  /* 00000003 */  "\x48\x99"                           /*  cqo */
  /* 00000005 */  "\x85\xD2"                           /*  test edx, edx */
  /* 00000007 */  "\x74\x00"                           /*  je 00000009h */


One from hh86 in 6 bytes

  /* 00000000 */  "\x8C\xE8"                           /*  mov ax, gs */
  /* 00000002 */  "\x3C\x33"                           /*  cmp al, 33h */
  /* 00000004 */  "\x74\x00"                           /*  je 00000006h */

// -------------------- begin wow64_test.cpp
#include <windows.h>
#include <stdio.h>

// IsWow64 returns -1 (TRUE) if under Wow64, else 0 (FALSE)

/* Copyright (c) 2014 Kevin Devine */
/* Size = 4 bytes */

char IsWow64[] = {
  /* 0000 */ "\x33\xC0" /* xor eax, eax */
  /* 0002 */ "\x48" /* dec eax */
  /* 0003 */ "\xC3" /* ret */
};

int main( void )
{
  void *exec = VirtualAlloc(0, strlen (IsWow64) + MAX_PATH,
    MEM_COMMIT, PAGE_EXECUTE_READWRITE);
  memcpy (exec, IsWow64, strlen (IsWow64));
  printf ("\nRunning under Wow64? : %s\n", ((BOOL(*)())exec)() ? "Yes" : "No");
  VirtualFree (exec, 0, MEM_RELEASE);
}

// -------------------- end wow64_test.cpp

If you find any errors with these examples, don't hesitate to contact 
and correct me.

BR
Kevin ( @cmpxchg8 )

References:
   [1]: IS_X64() IN 5 BYTES (INCLUDING BRANCH)
      http://pferrie.host22.com/misc/isx64.htm
    
   [2]: isX64 Gem
      http://www.ragestorm.net/blogs/?p=376
